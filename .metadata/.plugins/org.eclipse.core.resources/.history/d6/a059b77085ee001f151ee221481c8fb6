package Junit;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.Test;
import org.junit.jupiter.api.BeforeEach;

public class OrderService2Test {
	
	private OrderService2 orderService2;
	
	@BeforeEach
	public void setUp() {
		orderService2 = new OrderService2();
	}
	@Test
	public void TestCalPrice_ValidInputs() {
		double price = 100.00;
		int quantity = 2;
		double expectedPrice = price*quantity*(1-orderService2.getDiscount());
		assertEquals(expectedPrice, orderService2.calPrice(price, quantity));
	}
	
	
	//successfully place order -> assertTrue -> assertEquals
	@Test
	void testStock() {
	    OrderService2 os = new OrderService2();
	    int quantity = 2;
	    int stock = os.getStock();
	    boolean result = os.placeOrder(quantity);
	    
	    assertTrue(result, "Order should be placed successfully");
	    assertEquals(stock-quantity, os.getStock(), "Stock should be reduced by the ordered quantity");
	}
	//positive cases
	//negative cases
	
	//order with zero quantity
	@Test
	void testCalTotalWithZeroQuantity() {
	    OrderService2 os = new OrderService2();
	    double total = os.calPrice(100.00, 0); // Calculating total price with quantity 0
	    assertEquals(0, total, "Total should be 0 when quantity is 0");
	}
	//order where price is negative
	
	//Boundary Test cases edge cases
	
	//quantity exactly same as stock
	
	// order just below stock limit ->
	
}
