package Junit;
 
import static org.junit.jupiter.api.Assertions.*;

import java.time.Duration;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Timeout;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
 
class OrderServiceTest {
	OrderService os=new OrderService();
 
//	@Test
//	void test() {
//		double total = os.calPrice(100.00, 2);
//		assertEquals(180,total, "total should be 180 after 10% discount");
//		//fail("Not yet implemented");
//	}
// 
	
	@Test
	void testSufficientStock() {
	    OrderService os = new OrderService();
	    boolean result = os.placeOrder(5);
	    assertTrue(result, "Order should be placed successfully");
	    assertEquals(5, os.getStock(), "Stock should be reduced by the ordered quantity");
	}
	
	@Test
	void testInsufficientStock() {
	    OrderService os = new OrderService();
	    IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
	        os.placeOrder(12); // Trying to place an order for 12 units when only 10 are available
	    });
	    assertEquals("Insufficient stock", exception.getMessage(), "Exception message should match");
	}

	
	@Test
	void testCalTotalWithZeroQuantity() {
	    OrderService os = new OrderService();
	    double total = os.calPrice(100.00, 0); // Calculating total price with quantity 0
	    assertEquals(0, total, "Total should be 0 when quantity is 0");
	}
	
	
	@ParameterizedTest
    @CsvSource({
        "100.00,2,180.00",
        "200.00,1,180.00",
        "50.00,3,135.00",
        "0.00,4,0.00"
    })  
    void testCalPriceParamCsv(double price, int quantity, double expectedTotal) {
        OrderService os = new OrderService();
        double total = os.calPrice(price, quantity);
        assertEquals(expectedTotal, total, 0.01, "Total should match the expected value");
    }
	
	@Test
	void testTimeout() {
		assertTimeout(java.time.Duration.ofMillis(1000),()->{
			Thread.sleep(500);
			os.calPrice(100.00, 2);
		});
	}


	
	
}